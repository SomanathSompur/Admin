 // Method 5 : API to retrieve notify details by eventId
    // Test Case 1 : testRetrieveNotifyResponseByEventId_Success()
    @Test
    public void testRetrieveNotifyResponseByEventId_Success() throws Exception {
        // Set a sample event Response
        // Mock eventId
        EventResponse eventResponse = new EventResponse();
        String eventId = "123";   // the variable eventId is being initialized

        // Stub the Mock, service response for a successful case
        when(documentGeneratorEventStoreService.fetchNotifyDetailsByEventId(eventId))
                .thenReturn(Optional.of(eventResponse));

        // Execute and assert or simulate the MVC
        mockMvc.perform(get("/event/123/notify", eventId)
                        .contentType(MediaType.APPLICATION_JSON))    // JSON format
                        .andExpect(status().isOk())                // 200 Ok
                        .andReturn();

        // Verify that the service method was called with the expected eventId
        verify(documentGeneratorEventStoreService,times(1)).fetchNotifyDetailsByEventId(eventId);
    }


    // Method 5 : API to retrieve notify details by eventId
    // Test Case 2 : testRetrieveNotifyResponseByEventId_NotFound()
    @Test
    public void testRetrieveNotifyResponseByEventId_NotFound() throws Exception {
        // Mock eventId
        String eventId = "123";

        // Stub the Mock, service response for a scenario where no summary report is found
        when(documentGeneratorEventStoreService.fetchNotifyDetailsByEventId(eventId))
                .thenReturn(Optional.empty());

        // Execute and assert or simulate the MVC
        mockMvc.perform(get("/event/123/notify", eventId)
                        .contentType(MediaType.APPLICATION_JSON))
                        .andExpect(status().isNotFound())
                        .andReturn();

        // Verify that the service method was called with the expected eventId
        verify(documentGeneratorEventStoreService,times(1)).fetchNotifyDetailsByEventId(eventId);
    }

    // Method 5 : API to retrieve notify details by eventId
    // Test Case 3 : testRetrieveNotifyResponseByEventId_EventIdIsNull() or InvalidInput()
    @Test
    public void testRetrieveNotifyResponseByEventId_EventIdIsNull() throws Exception {
        // Mock an invalid eventId (e.g., empty string)
        String eventId = "null"; // Invalid input

        // Execute and assert or simulate the MVC
        mockMvc.perform(get("/event/null/notify", eventId)
                         .contentType(MediaType.APPLICATION_JSON))
                         .andExpect(status().isBadRequest())       // 400 Bad Request status
                         // .andExpect((ResultMatcher) jsonPath("$.error").value("Bad Request"))
                         .andReturn();

        // Verify that the service method was not called
        verify(documentGeneratorEventStoreService, never()).fetchNotifyDetailsByEventId(any());
    }

    // Method 5 : API to retrieve notify details by eventId
    // Test Case 4 : testRetrieveNotifyResponseByEventId_EventIdIsEmpty()
    @Test
    public void testRetrieveNotifyResponseByEventId_EventIdIsEmpty() throws Exception {
        // Mock an empty eventId
        String eventId = " ";

        // Execute and assert or simulate the MVC
        mockMvc.perform(get("/event//notify", eventId)
                        .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isBadRequest())        // 400 Bad Request status
                .andReturn();

        // Verify that the service method was not called
        verify(documentGeneratorEventStoreService, never()).fetchNotifyDetailsByEventId(any());
    }

    // Method 5 : API to retrieve notify details by eventId
    // Test Case 5 : testRetrieveNotifyResponseByEventId_InternalServerError()
    @Test
    public void testRetrieveNotifyResponseByEventId_InternalServerError() throws Exception {
        // Mock eventId
        String eventId = "123";

        // Stub the Mock, service method to return an empty Optional, simulating an internal server error
        when(documentGeneratorEventStoreService.fetchNotifyDetailsByEventId(eventId))
                .thenReturn(Optional.empty());

        // Execute and assert or simulate the MVC an internal server error
        mockMvc.perform(MockMvcRequestBuilders.get("/event/123/notify", eventId))
                .andExpect(MockMvcResultMatchers.status().isInternalServerError())
                .andExpect(MockMvcResultMatchers.content().contentType("application/json"))
                .andExpect(MockMvcResultMatchers.jsonPath("$.error").value("Internal Server Error"));

        // Verify that the service method was called with the correct eventId
        verify(documentGeneratorEventStoreService,times(1)).fetchNotifyDetailsByEventId(eventId);
    }

    // Method 5 :
    //Test Case 6 : testRetrieveNotifyResponseByEventId_EmptyEventResponse() or EmptyOptional
    @Test
    public void testRetrieveNotifyResponseByEventId_EmptyEventResponse() throws Exception {
        // Mock eventId
        String eventId = "123";

        // Stub the Mock, service method to return an empty Optional
        when(documentGeneratorEventStoreService.fetchNotifyDetailsByEventId(eventId))
                .thenReturn(Optional.empty());

        // Execute and assert or simulate the MVC
        mockMvc.perform(get("/event/123/notify", eventId))
                .andExpect(status().isOk())
                .andExpect((ResultMatcher) content().contentType(MediaType.APPLICATION_JSON))
                .andExpect(jsonPath("$.eventId").value(eventId))   // Assuming eventId is returned in the response
                .andExpect(jsonPath("$.data").doesNotExist());   // Ensure that data field is not present in the response

        // Verify that the service method was called with the correct eventId
        verify(documentGeneratorEventStoreService, times(1)).fetchNotifyDetailsByEventId(eventId);
    }

====================================================================================================

    // Method 6 : API to retrieve summary report by date range
    // Test Case 1 : testRetrieveSummaryReportByDateRange_Success()
    @Test
    public void testRetrieveSummaryReportByDateRange_Success() throws Exception {
        // Mock the required request parameters
        String type = "sampleType";
        String startDate = "2023-01-01";
        String endDate = "2023-12-31";

        // Sample EventSummaryResponse for testing
        EventSummaryResponse summaryResponse = new EventSummaryResponse();

        // Stub the Mock, service response for a successful case
        when(documentGeneratorEventStoreService.fetchEventSummaryByDateRange(type, startDate, endDate))
                .thenReturn(Optional.of(summaryResponse));

        // Execute and assert or simulate the MVC
        mockMvc.perform(get("/event-summary")
                        .param("type", type)
                        .param("startDate", startDate)
                        .param("endDate", endDate)
                        .contentType(MediaType.APPLICATION_JSON))
                        .andExpect(status().isOk())
                        .andReturn();

        // Verify that the service method was called with the expected parameters
        verify(documentGeneratorEventStoreService, times(1)).fetchEventSummaryByDateRange(type, startDate, endDate);
    }


    // Method 6 : API to retrieve summary report by date range
    // Test Case 2 : testRetrieveSummaryReportByDateRange_NotFound() or Failure()
    @Test
    public void testRetrieveSummaryReportByDateRange_NotFound() throws Exception {
        // Mock the required request parameters
        String type = "sampleType";
        String startDate = "2023-01-01";
        String endDate = "2023-12-31";

        // Stub the Mock, service response for a scenario where no summary report is found
        when(documentGeneratorEventStoreService.fetchEventSummaryByDateRange(type, startDate, endDate))
                .thenReturn(Optional.empty());

        // Execute and assert or simulate the MVC
        mockMvc.perform(get("/event-summary")
                        .param("type", type)
                        .param("startDate", startDate)
                        .param("endDate", endDate)
                        .contentType(MediaType.APPLICATION_JSON))
                        .andExpect(status().isNotFound())
                        .andReturn();

        // Verify that the service method was called with the expected parameters
        verify(documentGeneratorEventStoreService, times(1)).fetchEventSummaryByDateRange(type, startDate, endDate);
    }

    // Method 6 : API to retrieve summary report by date range
    // Test Case 3 : testRetrieveSummaryReportByDateRange_InvalidInput()
    @Test
    public void testRetrieveSummaryReportByDateRange_InvalidInput() throws Exception {
        // Mock the required request parameters with invalid input
        String type = null; // Invalid input
        String startDate = "2023-01-01";
        String endDate = "2023-12-31";

        // Execute and assert or simulate the MVC
        mockMvc.perform(get("/event-summary")
                        .param("type", type)
                        .param("startDate", startDate)
                        .param("endDate", endDate)
                        .contentType(MediaType.APPLICATION_JSON))
                        .andExpect(status().isBadRequest())
                        .andReturn();

        // Verify that the service method was not called
        Mockito.verifyNoInteractions(documentGeneratorEventStoreService);  // Because parameter is missing
    }


    // Method 6 : API to retrieve summary report by date range
    // Test Case 4 : testRetrieveSummaryReportByDateRange_InternalServerError()
    @Test
    public void testRetrieveSummaryReportByDateRange_InternalServerError() throws Exception {
        // Mock the required request parameters
        String type = "sampleType";
        String startDate = "2023-01-01";
        String endDate = "2023-12-31";

        // Stub the Mock, service method to return an empty Optional, simulating an internal server error
        when(documentGeneratorEventStoreService.fetchEventSummaryByDateRange(type, startDate, endDate))
                .thenReturn(Optional.empty());

        // Execute and assert or simulate the MVC an internal server error
        mockMvc.perform(get("/event-summary")
                        .param("type", type)
                        .param("startDate", startDate)
                        .param("endDate", endDate)
                        .contentType(MediaType.APPLICATION_JSON))           // content type of the request
                        .andExpect(status().isInternalServerError())
                        .andExpect((ResultMatcher) content().contentType(MediaType.APPLICATION_JSON))  // response
                        .andExpect(jsonPath("$.error").value("Internal Server Error"));

        // Verify that the service method was called with the expected parameters
        verify(documentGeneratorEventStoreService, times(1)).fetchEventSummaryByDateRange(type, startDate, endDate);
    }


    // Method 6 : API to retrieve summary report by date range
    // Test Case 5 : testRetrieveSummaryReportByDateRange_InvalidDateRange()  or NotInDateRange()
    @Test
    public void testRetrieveSummaryReportByDateRange_InvalidDateRange() throws Exception {
        // Mock the required request parameters
        String type = "sampleType";
        String startDate = "2023-02-01";
        String endDate = "2023-01-31";   // End date is earlier than start date

        // Stub the Mock, service method to return an empty Optional, simulating an internal server error
        when(documentGeneratorEventStoreService.fetchEventSummaryByDateRange(type, startDate, endDate))
                .thenReturn(Optional.empty());

        // Execute and assert or simulate the MVC
        mockMvc.perform(MockMvcRequestBuilders.get("/event-summary")
                        .param("type", type)
                        .param("startDate", startDate)
                        .param("endDate", endDate)
                        .contentType(MediaType.APPLICATION_JSON))
                        .andExpect(status().isBadRequest()); // Expecting a bad request response

        // Verify that the service method was called with the expected parameters
        verify(documentGeneratorEventStoreService, times(1)).fetchEventSummaryByDateRange(type, startDate, endDate);
    }

    // Method 6 : API to retrieve summary report by date range  Optional<EventResponse>
    // Test Case 6 : testRetrieveSummaryReportByDateRange_EmptyEventResponse() --> Optional.empty
    @Test
    public void testRetrieveSummaryReportByDateRange_EmptyEventResponse() throws Exception {
        // Mock the required request parameters
        String type = "sampleType";
        String startDate = "2023-01-01";
        String endDate = "2023-01-31";

        // Stub the Mock, the service to return an empty Optional
        when(documentGeneratorEventStoreService.fetchEventSummaryByDateRange(type, startDate, endDate))
                .thenReturn(Optional.empty());

        // Execute and assert or simulate the MVC, Perform the mock HTTP GET request
        mockMvc.perform(get("/event-summary")
                        .param("type", type)
                        .param("startDate", startDate)
                        .param("endDate", endDate)
                        .contentType(MediaType.APPLICATION_JSON))
                        .andExpect(status().isOk())         // Expecting a 200 status code
                        .andExpect((ResultMatcher) content().string(""));   // Expecting an empty response body

        // Verify that the service method was called with the expected parameters
        verify(documentGeneratorEventStoreService, times(1)).fetchEventSummaryByDateRange(type, startDate, endDate);
    }

    // Method 6 : API to retrieve summary report by date range
    // Test Case 7 : testRetrieveSummaryReportByDateRange_Performance()
    @Test
    public void testRetrieveSummaryReportByDateRange_Performance() throws Exception {
        // Mock the required request parameters
        String type = "someType";
        String startDate = "2023-01-01";
        String endDate = "2023-01-31";

        // Sample EventSummaryResponse for testing
        EventSummaryResponse SummaryResponse = new EventSummaryResponse(/* Initialize with appropriate data */);

        /* For example, if EventSummaryResponse is defined with fields like eventId, eventName, eventDate,
           and so on, you would initialize it like this:
           summaryResponse.setEventId(1);
           summaryResponse.setEventName("Sample Event");
           summaryResponse.setEventDate("2023-10-15");
           Set other properties as needed    */

        // Stub the Mock, the service response
        when(documentGeneratorEventStoreService.fetchEventSummaryByDateRange(type, startDate, endDate))
                .thenReturn(Optional.of(SummaryResponse));

        // Execute and assert or simulate the MVC, Measure the response time repeatedly
        int numberOfRequests = 100; // Adjust the number of requests as needed
        long totalResponseTime = 0;

        for (int i = 0; i < numberOfRequests; i++) {
            long startTime = System.currentTimeMillis();
            mockMvc.perform(MockMvcRequestBuilders.get("/event-summary")
                            .param("type", type)
                            .param("startDate", startDate)
                            .param("endDate", endDate)
                            .contentType(MediaType.APPLICATION_JSON))
                            .andExpect(status().isOk())
                            .andExpect((ResultMatcher) content().contentType(MediaType.APPLICATION_JSON));
            long endTime = System.currentTimeMillis();
            totalResponseTime += (endTime - startTime);
        }

        // Calculate average response time
        long averageResponseTime = totalResponseTime / numberOfRequests;

        // Assert that the average response time is within acceptable performance limits
        assertTrue(averageResponseTime < 100); // Adjust the threshold as per your performance requirements

        // Verify that the service method was called with the expected parameters
        verify(documentGeneratorEventStoreService, times(1)).fetchEventSummaryByDateRange(type, startDate, endDate);
    }

    // Method 6 : API to retrieve summary report by date range
    // Test Case 8 : EmptyDates()
    @Test
    public void testRetrieveSummaryReportByDateRange_EmptyDates() throws Exception {
        // Mock the required request parameters with empty dates
        String type = "sampleType";
        String startDate = "";
        String endDate = "";

        // Stub the mock service response for a scenario where EventSummaryResponse is empty (not found)
        when(documentGeneratorEventStoreService.fetchEventSummaryByDateRange(type, startDate, endDate))
                .thenReturn(Optional.empty());

        // Execute and assert the MVC request
        mockMvc.perform(get("/event-summary")
                        .param("type", type)
                        .param("startDate", startDate)
                        .param("endDate", endDate)
                        .contentType(MediaType.APPLICATION_JSON))
                        .andExpect(status().isNotFound())
                        .andReturn();

        // Verify that the service method was not called
        Mockito.verifyNoInteractions(documentGeneratorEventStoreService);   // Because parameter is missing
    }

    // Method 6 : API to retrieve summary report by date range
    // Test Case 9 : StartDateIsNull()
    @Test
    public void testRetrieveSummaryReportByDateRange_StartDateIsNull() throws Exception {
        // Mock the required request parameters with null startDate
        String type = "sampleType";
        String startDate = null;  // Set startDate as null
        String endDate = "2023-12-31";

        // Execute and assert the MVC request with null startDate
        mockMvc.perform(MockMvcRequestBuilders.get("/event-summary")
                        .param("type", type)
                        .param("startDate", startDate)
                        .param("endDate", endDate)
                        .contentType(MediaType.APPLICATION_JSON))
                        .andExpect(status().isBadRequest())  // Expect a "bad request" response
                        .andReturn();

        // Verify that the service method was not called
        Mockito.verifyNoInteractions(documentGeneratorEventStoreService);   // Because startDate is missing
    }

    // Method 6 : API to retrieve summary report by date range
    // Test Case 10 : StartDateIsEmpty()
    @Test
    public void testRetrieveSummaryReportByDateRange_StartDateIsEmpty() throws Exception {
        // Mock the required request parameters with null startDate
        String type = "sampleType";
        String startDate = "";  // Set startDate as an empty string not null
        String endDate = "2023-12-31";

        // Execute and assert the MVC request with null startDate
        mockMvc.perform(MockMvcRequestBuilders.get("/event-summary")
                        .param("type", type)
                        .param("startDate", startDate)
                        .param("endDate", endDate)
                        .contentType(MediaType.APPLICATION_JSON))
                        .andExpect(status().isBadRequest())  // Expect a "bad request" response
                        .andReturn();

        // Verify that the service method was not called
        Mockito.verifyNoInteractions(documentGeneratorEventStoreService);   // Because startDate is missing
    }

    // Method 6 : API to retrieve summary report by date range
    // Test Case 11 : EndDateIsNull()
    @Test
    public void testRetrieveSummaryReportByDateRange_EndDateIsNull() throws Exception {
        // Mock the required request parameters with an empty endDate
        String type = "sampleType";
        String startDate = "2023-01-01";
        String endDate = null;  // Set endDate as an empty string not null

        // Execute and assert the MVC request with an empty endDate
        mockMvc.perform(get("/event-summary")
                        .param("type", type)
                        .param("startDate", startDate)
                        .param("endDate", endDate)
                        .contentType(MediaType.APPLICATION_JSON))
                        .andExpect(status().isBadRequest())  // Expect a "bad request" response
                        .andReturn();

        // Verify that the service method was not called
        Mockito.verifyNoInteractions(documentGeneratorEventStoreService);  // Because endDate is null
    }

    // Method 6 : API to retrieve summary report by date range
    // Test Case 12 : EndDateIsEmpty()
    @Test
    public void testRetrieveSummaryReportByDateRange_EndDateIsEmpty() throws Exception {
        // Mock the required request parameters with an empty endDate
        String type = "sampleType";
        String startDate = "2023-01-01";
        String endDate = "";  // Set endDate as an empty string not null

        // Execute and assert the MVC request with an empty endDate
        mockMvc.perform(get("/event-summary")
                        .param("type", type)
                        .param("startDate", startDate)
                        .param("endDate", endDate)
                        .contentType(MediaType.APPLICATION_JSON))
                        .andExpect(status().isBadRequest())  // Expect a "bad request" response
                        .andReturn();

        // Verify that the service method was not called
        Mockito.verifyNoInteractions(documentGeneratorEventStoreService);  // Because endDate is empty
    }

    // Method 6 : API to retrieve summary report by date range
    // Test Case 13 : AllInputsAreNull()
    @Test
    public void testRetrieveSummaryReportByDateRange_AllInputsAreNull() throws Exception {
        // Mock the required request parameters with an empty endDate
        String type = null;
        String startDate = null;
        String endDate = null;  // Set endDate as an empty string not null

        // Execute and assert the MVC request with an empty endDate
        mockMvc.perform(get("/event-summary")
                        .param("type", type)
                        .param("startDate", startDate)
                        .param("endDate", endDate)
                        .contentType(MediaType.APPLICATION_JSON))
                        .andExpect(status().isBadRequest())  // Expect a "bad request" response
                        .andReturn();

        // Verify that the service method was not called
        Mockito.verifyNoInteractions(documentGeneratorEventStoreService);  // Because endDate is empty
    }

    // Method 6 : API to retrieve summary report by date range
    // Test Case 14 : AllInputsAreEmpty()
    @Test
    public void testRetrieveSummaryReportByDateRange_AllInputsAreEmpty() throws Exception {
        // Mock the required request parameters with an empty endDate
        String type = "";
        String startDate = "";
        String endDate = "";  // Set endDate as an empty string not null

        // Execute and assert the MVC request with an empty endDate
        mockMvc.perform(get("/event-summary")
                        .param("type", type)
                        .param("startDate", startDate)
                        .param("endDate", endDate)
                        .contentType(MediaType.APPLICATION_JSON))
                        .andExpect(status().isBadRequest())  // Expect a "bad request" response
                        .andReturn();

        // Verify that the service method was not called
        Mockito.verifyNoInteractions(documentGeneratorEventStoreService);  // Because endDate is empty
    }