 // Method 3 : SaveDocumentServiceRequestStatusDetails
    // Scenario 1 : testSaveDocumentServiceRequestStatusDetails_SuccessfulSave()
    @Test
    public void testSaveDocumentServiceRequestStatusDetails_SuccessfulSave() {
        // Create a mock RequestDetails object with necessary data
        RequestDetails requestDetails = new RequestDetails();
        DocumentServiceRequestData documentServiceRequestDTO = new DocumentServiceRequestData();
        documentServiceRequestDTO.setRequestId(123L); // Use 123L to represent a long
        requestDetails.setDocumentServiceRequestDTO(documentServiceRequestDTO);
        requestDetails.setStatus("SUCCESS");

        // Create a mock DocumentServiceRequestStatus entity
        DocumentServiceRequestStatus documentServiceRequestStatusEntity = new DocumentServiceRequestStatus();
        documentServiceRequestStatusEntity.setRequestId(123L); // Use 123L to represent a long
        documentServiceRequestStatusEntity.setRequestStatus("SUCCESS");

        // Create a mock DocumentServiceRequestStatusData DTO
        DocumentServiceRequestStatusData documentServiceRequestStatusDTO = new DocumentServiceRequestStatusData();
        documentServiceRequestStatusDTO.setRequestId(123L); // Use 123L to represent a long
        documentServiceRequestStatusDTO.setStatus("SUCCESS");

        // Mock necessary repository and mapper methods
        when(documentServiceRequestStatusRepository.save(any(DocumentServiceRequestStatus.class)))
                .thenReturn(documentServiceRequestStatusEntity);
        when(eventMapper.requestStatusToRequestStatusData(any(DocumentServiceRequestStatus.class)))
                .thenReturn(documentServiceRequestStatusDTO);

        // Call the method
        eventStoreHelper.saveDocumentServiceRequestStatusDetails(requestDetails);

        // Verify that the request details were updated correctly
        assertEquals(123L, requestDetails.getDocumentServiceRequestDTO().getRequestId().longValue());
        assertEquals("SUCCESS", requestDetails.getDocumentServiceRequestDTO().getDocumentServiceRequestStatusDataList().get(0).getStatus());

    }

    // Method 3 : SaveDocumentServiceRequestStatusDetails
    // Scenario 2 : testSaveDocumentServiceRequestStatusDetails_InternalServerError()
    @Test
    public void testSaveDocumentServiceRequestStatusDetails_InternalServerError() {
        // Create a mock RequestDetails object with necessary data
        RequestDetails requestDetails = new RequestDetails();
        DocumentServiceRequestData documentServiceRequestDTO = new DocumentServiceRequestData();
        documentServiceRequestDTO.setRequestId(123L); // Use 123L to represent a long
        requestDetails.setDocumentServiceRequestDTO(documentServiceRequestDTO);
        requestDetails.setStatus("SUCCESS");

        // Mock the repository to throw a RuntimeException during save
        when(documentServiceRequestStatusRepository.save(any(DocumentServiceRequestStatus.class)))
                .thenThrow(new RuntimeException("Internal Server Error"));

        // Call the method
        eventStoreHelper.saveDocumentServiceRequestStatusDetails(requestDetails);

        // Verify that no further interactions with the repository or mapper occur
        verifyNoInteractions(eventMapper);
    }

    // Method 3 : SaveDocumentServiceRequestStatusDetails
    // Scenario 3 : testSaveDocumentServiceRequestStatusDetails_NotFound()
    @Test
    public void testSaveDocumentServiceRequestStatusDetails_NotFound() {
        // Create a mock RequestDetails object with necessary data
        RequestDetails requestDetails = new RequestDetails();
        DocumentServiceRequestData documentServiceRequestDTO = new DocumentServiceRequestData();
        documentServiceRequestDTO.setRequestId(123L); // Use 123L to represent a long
        requestDetails.setDocumentServiceRequestDTO(documentServiceRequestDTO);
        requestDetails.setStatus("SUCCESS");

        // Mock the repository to throw an EmptyResultDataAccessException (NotFoundException) during save
        when(documentServiceRequestStatusRepository.save(any(DocumentServiceRequestStatus.class)))
                .thenThrow(new EmptyResultDataAccessException(1));

        // Use assertThrows to expect a NotFoundException
        NotFoundException exception = assertThrows(NotFoundException.class, () -> {
            eventStoreHelper.saveDocumentServiceRequestStatusDetails(requestDetails);
        });

        // Verify that the exception message is as expected
        assertEquals("DocumentServiceRequestStatus not found for requestId: 123", exception.getMessage());

        // Verify that no further interactions with the repository or mapper occur
        verifyNoInteractions(eventMapper);
    }

    // Method 3 : SaveDocumentServiceRequestStatusDetails
    // Scenario 4 : testSaveDocumentServiceRequestStatusDetails_NullRequestDetails()
    @Test
    public void testSaveDocumentServiceRequestStatusDetails_NullRequestDetails() {
        // Create a sample RequestDetails with null value
        RequestDetails requestDetails = new RequestDetails();
        requestDetails.setStatus(null);

        // Mock the behavior of documentServiceRequestStatusRepository.save to return a status entity
        DocumentServiceRequestStatus savedStatusEntity = new DocumentServiceRequestStatus();
        when(documentServiceRequestStatusRepository.save(any(DocumentServiceRequestStatus.class))).thenReturn(savedStatusEntity);

        // Call the method under test
        eventStoreHelper.saveDocumentServiceRequestStatusDetails(requestDetails);

        // Verify that documentServiceRequestStatusRepository.save was not called
        verify(documentServiceRequestStatusRepository, never()).save(any(DocumentServiceRequestStatus.class));

        // Verify that eventMapper.requestStatusToRequestStatusData was not called
        verify(eventMapper, never()).requestStatusToRequestStatusData(any());
    }

    // Method 3 : SaveDocumentServiceRequestStatusDetails
    // Scenario 5 : testSaveDocumentServiceRequestStatusDetails_EmptyRequestDetails()
    @Test
    public void testSaveDocumentServiceRequestStatusDetails_EmptyRequestDetails() {
        // Create an empty RequestDetails object
        RequestDetails requestDetails = new RequestDetails();
        requestDetails.setStatus("");

        // Mock the behavior of documentServiceRequestStatusRepository.save to return a status entity
        DocumentServiceRequestStatus savedStatusEntity = new DocumentServiceRequestStatus();
        when(documentServiceRequestStatusRepository.save(any(DocumentServiceRequestStatus.class))).thenReturn(savedStatusEntity);

        // Call the method under test
        eventStoreHelper.saveDocumentServiceRequestStatusDetails(requestDetails);

        // Verify that documentServiceRequestStatusRepository.save was called
        verify(documentServiceRequestStatusRepository).save(any(DocumentServiceRequestStatus.class));

        // Verify that eventMapper.requestStatusToRequestStatusData was not called
        verify(eventMapper, never()).requestStatusToRequestStatusData(any());

        // Verify that the documentServiceRequestDTO within requestDetails was not modified
        assertNull(requestDetails.getDocumentServiceRequestDTO().getDocumentServiceRequestStatusDataList());
    }

    // Method 3 : SaveDocumentServiceRequestStatusDetails
    // Scenario 6 : testSaveDocumentServiceRequestStatusDetails_MissingRequestId()
    @Test
    public void testSaveDocumentServiceRequestStatusDetails_MissingRequestId() {
        // Create a sample RequestDetails with missing requestId
        RequestDetails requestDetails = new RequestDetails();
        DocumentServiceRequestData documentServiceRequestDTO = new DocumentServiceRequestData();
        // Missing requestId here
        requestDetails.setDocumentServiceRequestDTO(documentServiceRequestDTO);
        requestDetails.setStatus("SUCCESS");

        // Mock the behavior of eventMapper
        when(eventMapper.requestStatusToRequestStatusData(any())).thenReturn(new DocumentServiceRequestStatusData());

        // Call the method under test
        eventStoreHelper.saveDocumentServiceRequestStatusDetails(requestDetails);

        // Verify that documentServiceRequestStatusRepository.save was not called
        verify(documentServiceRequestStatusRepository, never()).save(any(DocumentServiceRequestStatus.class));

        // Verify that eventMapper.requestStatusToRequestStatusData was not called
        verify(eventMapper, never()).requestStatusToRequestStatusData(any());

        // Verify that the documentServiceRequestDTO was not modified
        assertNull(requestDetails.getDocumentServiceRequestDTO().getDocumentServiceRequestStatusDataList());
    }

    // Method 3 : SaveDocumentServiceRequestStatusDetails
    // Scenario 7 : testSaveDocumentServiceRequestStatusDetails_InvalidRequestId()
    @Test
    public void testSaveDocumentServiceRequestStatusDetails_InvalidRequestId() {
        // Create a sample RequestDetails with an invalid requestId (e.g., negative value)
        RequestDetails requestDetails = new RequestDetails();
        DocumentServiceRequestData documentServiceRequestDTO = new DocumentServiceRequestData();
        documentServiceRequestDTO.setRequestId(-123L); // Invalid requestId (negative value)
        requestDetails.setDocumentServiceRequestDTO(documentServiceRequestDTO);
        requestDetails.setStatus("SUCCESS");

        // Mock the behavior of eventMapper
        when(eventMapper.requestStatusToRequestStatusData(any())).thenReturn(new DocumentServiceRequestStatusData());

        // Call the method under test
        eventStoreHelper.saveDocumentServiceRequestStatusDetails(requestDetails);

        // Verify that documentServiceRequestStatusRepository.save was not called
        verify(documentServiceRequestStatusRepository, never()).save(any(DocumentServiceRequestStatus.class));

        // Verify that eventMapper.requestStatusToRequestStatusData was not called
        verify(eventMapper, never()).requestStatusToRequestStatusData(any());

        // Verify that the documentServiceRequestDTO was not modified
        assertNull(requestDetails.getDocumentServiceRequestDTO().getDocumentServiceRequestStatusDataList());
    }

    // Method 3 : SaveDocumentServiceRequestStatusDetails
    // Scenario 8 : testSaveDocumentServiceRequestStatusDetails_RequestIdNotFound()
    @Test
    public void testSaveDocumentServiceRequestStatusDetails_RequestIdNotFound() {
        // Create a sample RequestDetails with a requestId that is not found
        RequestDetails requestDetails = new RequestDetails();
        DocumentServiceRequestData documentServiceRequestDTO = new DocumentServiceRequestData();
        documentServiceRequestDTO.setRequestId(123L); // Invalid requestId that is not found
        requestDetails.setDocumentServiceRequestDTO(documentServiceRequestDTO);
        requestDetails.setStatus("SUCCESS");

        // Mock the behavior of documentServiceRequestStatusRepository.save to throw an exception
        when(documentServiceRequestStatusRepository.save(any(DocumentServiceRequestStatus.class)))
                .thenThrow(new DataIntegrityViolationException("Request ID not found"));

        // Call the method under test
        eventStoreHelper.saveDocumentServiceRequestStatusDetails(requestDetails);

        // Verify that documentServiceRequestStatusRepository.save was called
        verify(documentServiceRequestStatusRepository).save(any(DocumentServiceRequestStatus.class));

        // Verify that eventMapper.requestStatusToRequestStatusData was not called
        verify(eventMapper, never()).requestStatusToRequestStatusData(any());

        // Verify that the documentServiceRequestDTO was not modified
        assertNull(requestDetails.getDocumentServiceRequestDTO().getDocumentServiceRequestStatusDataList());
    }